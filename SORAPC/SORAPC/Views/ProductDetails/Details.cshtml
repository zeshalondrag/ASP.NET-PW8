@model SORAPC_API.Models.Product
@{
    ViewData["Title"] = "Купить " + Model.Names;
}

<div class="container my-5 pt-5">
    <!-- Заголовок -->
    <h1 class="fw-bold mb-4">
        @{
            string category = Model.ProductCategoryId == 1 ? "Материнская плата" :
            Model.ProductCategoryId == 2 ? "Видеокарта" :
            Model.ProductCategoryId == 3 ? "Процессор" :
            Model.ProductCategoryId == 4 ? "Система охлаждения" :
            Model.ProductCategoryId == 5 ? "Оперативная память" :
            Model.ProductCategoryId == 6 ? "Блок питания" :
            Model.ProductCategoryId == 7 ? "Жесткий диск/SSD" :
            Model.ProductCategoryId == 8 ? "Корпус" :
            Model.ProductCategoryId == 9 ? "Периферия" :
            "Неизвестно";
            @category
        } - @Model.Names
    </h1>

    <!-- Основная информация о товаре -->
    <div class="card shadow-sm border-0 rounded-4 p-4 mb-5 product-details-container">
        <div class="row g-4">
            <!-- Изображение -->
            <div class="col-md-4">
                <div class="product-image">
                    <img src="@Url.Content("~/image/" + Model.Img)" alt="@Model.Names" class="img-fluid rounded-3">
                </div>
            </div>

            <!-- Информация -->
            <div class="col-md-8">
                <div class="product-info">
                    <!-- Описание -->
                    <div class="product-description mb-3">
                        <p class="text-muted">@Model.Descriptions</p>
                    </div>

                    <!-- Рейтинг -->
                    <div class="product-rating mb-3">
                        @{
                            var averageRating = await Component.InvokeAsync("AverageRating", new { productId = Model.IdProduct });
                        }
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge text-warning d-flex align-items-center">
                                @averageRating
                            </span>
                            <span class="text-muted">| @Model.Reviews.Count() отзыв(ов)</span>
                        </div>
                    </div>

                    <!-- Цена и кнопка -->
                    <div class="product-price mb-3 d-flex align-items-center gap-3">
                        <p class="fw-bold text-dark fs-3 mb-0">@Model.Price.ToString("N0") ₽</p>
                        @if (Model.ProductStatusId == 1)
                        {
                            <form asp-action="AddToCart" asp-controller="Cart" method="post" class="d-inline">
                                <input type="hidden" name="productId" value="@Model.IdProduct" />
                                <input type="hidden" name="returnUrl" value="@Context.Request.Path@Context.Request.QueryString" />
                                <button type="submit" class="btn btn-primary rounded-pill px-4 py-2">
                                    <i class="fas fa-shopping-cart me-2"></i> Купить
                                </button>
                            </form>
                        }
                        else
                        {
                            <button class="btn btn-secondary rounded-pill px-4 py-2" disabled>
                                <i class="fas fa-shopping-cart me-2"></i> Купить
                            </button>
                        }
                    </div>

                    <!-- Статус -->
                    <div class="product-status d-flex gap-2">
                        <span class="badge @(Model.ProductStatusId == 1 ? "bg-success" : Model.ProductStatusId == 2 ? "bg-danger" : "bg-secondary")">
                            @{
                                string status = Model.ProductStatusId == 1 ? "В наличии" :
                                Model.ProductStatusId == 2 ? "Нет в наличии" :
                                "Неизвестно";
                                @status
                            }
                        </span>
                        @if (Model.ProductStatusId == 1)
                        {
                            <span class="text-muted">Пункты выдачи доступны</span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Отзывы -->
    <div class="reviews-container row g-4">
        <!-- Средний рейтинг -->
        <div class="col-md-4">
            <div class="card shadow-sm border-0 rounded-4 p-4 average-rating-card">
                <h3 class="fw-semibold mb-3">Рейтинг товара</h3>
                <div class="fs-4 mb-3">
                    @await Component.InvokeAsync("AverageRating", new { productId = Model.IdProduct })
                </div>
                <h5 class="fw-semibold mb-2">Есть что рассказать?</h5>
                <p class="text-muted mb-4">Оцените товар, ваш опыт будет полезен</p>
                <button class="btn btn-primary rounded-pill px-4 py-2" onclick="openAddReviewModal()">
                    Добавить отзыв
                </button>
            </div>
        </div>

        <!-- Список отзывов -->
        <div class="col-md-8">
            <div class="reviews-section">
                @await Html.PartialAsync("DisplayTemplates/Reviews", Model)
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для отзыва -->
<div id="addReviewModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeAddReviewModal()">×</span>
        @await Html.PartialAsync("_AddReview", new SORAPC_API.Models.Review { ProductId = Model.IdProduct })
    </div>
</div>

<style>
    .product-details-container {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .product-details-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15) !important;
        }

    .product-image img {
        max-height: 300px;
        object-fit: contain;
    }

    .product-description p {
        font-size: 1rem;
        line-height: 1.6;
    }

    .average-rating-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .average-rating-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15) !important;
        }

    .btn-primary {
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover:not(:disabled) {
            background-color: #0056b3;
        }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: #fff;
        margin: auto;
        display: block;
        padding: 20px;
        border: 1px solid #888;
        border-radius: 16px;
        width: 90%;
        max-width: 600px;
        position: relative;
        top: 50%;
        transform: translateY(-50%);
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }
</style>

<script>
    function openAddReviewModal() {
        document.getElementById('addReviewModal').style.display = 'block';
    }

    function closeAddReviewModal() {
        document.getElementById('addReviewModal').style.display = 'none';
    }

    window.onclick = function (event) {
        var modal = document.getElementById('addReviewModal');
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
</script>